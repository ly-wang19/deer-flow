version: '3.8'

services:
  # Backend API Service
  deer-flow-api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - SEARCH_API=${SEARCH_API:-duckduckgo}
      - TAVILY_API_KEY=${TAVILY_API_KEY:-}
      - BRAVE_SEARCH_API_KEY=${BRAVE_SEARCH_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - VOLCENGINE_TTS_APPID=${VOLCENGINE_TTS_APPID:-}
      - VOLCENGINE_TTS_ACCESS_TOKEN=${VOLCENGINE_TTS_ACCESS_TOKEN:-}
      - VOLCENGINE_TTS_CLUSTER=${VOLCENGINE_TTS_CLUSTER:-volcano_tts}
      - VOLCENGINE_TTS_VOICE_TYPE=${VOLCENGINE_TTS_VOICE_TYPE:-BV700_V2_streaming}
    volumes:
      - ./conf.yaml:/app/conf.yaml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Web Service
  deer-flow-web:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    depends_on:
      deer-flow-api:
        condition: service_healthy
    restart: unless-stopped

networks:
  default:
    name: deer-flow-network 